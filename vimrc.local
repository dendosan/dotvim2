" this is used when vim calls make and vim-go also uses
" it to when doing go-build, go-test, ...
set autowrite

set virtualedit=all     " cursor can travel to any space in buffer
set cpoptions+=$        " places $ at change position

" Mappings for navigating the quickfix list
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" my custom mappings
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
imap jj <Esc>
imap kk <Esc>
imap <C-c> <Esc>

" my custom vim-go mappings
" https://github.com/fatih/vim-go-tutorial
au FileType go nmap <leader>c <Plug>(go-coverage-toggle)

"" vim-go settings
let g:go_snippet_case_type = "camelcase"

"" neocomplete settings
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

"HTML Tidy for Syntastic
let g:syntastic_mode_map = {
            \'mode': 'passive',
            \'active_filetypes': [],
            \'passive_filetypes': []
            \}
nnoremap <C-w>E :SyntasticCheck<CR>

let g:syntastic_html_tidy_ignore_errors=[
            \" proprietary attribute ",
            \"trimming empty \<",
            \"inserting implicit ",
            \"unescaped \&" ,
            \"lacks \"action",
            \"lacks value",
            \"lacks \"src",
            \"is not recognized!",
            \"discarding unexpected",
            \"replacing obsolete "
            \]

"Typescript settings for Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tslint', 'tsuquyomi']

" Typescript settings
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
" js-pretty-template settings
"autocmd FileType typescript JsPreTmpl html
autocmd FileType typescript syn clear foldBraces

" Allow Vim-JSX to highlight *.js files
let g:jsx_ext_required = 0
" Allow MatchTagAlways to highlight JSX
let g:mta_filetypes = {
  \ 'javascript.jsx' : 1,
  \}

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Emmet Settings {{{
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}
" }}}


" Line Numbering {{{
"Toggle relative numbering, and set to absolute on loss of focus or insert mode
set rnu
function! ToggleNumbersOn()
    set nu!
    set rnu
endfunction
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction
autocmd FocusLost * call ToggleRelativeOn()
autocmd FocusGained * call ToggleRelativeOn()
autocmd InsertEnter * call ToggleRelativeOn()
autocmd InsertLeave * call ToggleRelativeOn()
" }}}

" Tags {{{
command! MakeTags !ctags -R .

" NOW CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" }}}

" insert newline without entering insert mode
map <CR> o<Esc>k

" reloads .vimrc -- making all changes active
map <silent> <Leader>v :source ~/.vimrc<CR>:PlugInstall<CR>:bdelete<CR>:exe ":echo 'vimrc reloaded'"<CR>

" the write sudo trick made easy
cmap w!! %!sudo tee > /dev/null %

" Custom Mappings {{{
nnoremap Q !!$SHELL<CR>                  " Q runs current line as a shell program
nnoremap <leader>- ddp                   " move line down
nnoremap <leader>_ ddkP                  " move line up
inoremap <c-u> <esc>viwU<esc>eli         " UP current word and stay in insert mode
nnoremap <c-u> viwUel                    " UP current word and stay in norm mode

" prettier config {{{
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync
"  }}}

" Folding {{{
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldenable          " don't fold files by default on open
set foldlevelstart=10   " start with fold level of 1
" }}}
" vim:foldmethod=marker:foldlevel=0

